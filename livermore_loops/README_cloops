README for the Livermore Loops in C

I. Legal Requirements etc.

This README file must be included with any form of this product, whether
on CDROM, a Web site, or through any other method of distribution. 

---------------------------------------------------------------

This work was produced at the University of California, Lawrence
Livermore National Laboratory (UC LLNL) under contract no. W-7405-ENG-48
(Contract 48) between the U.S. Department of Energy and The Regents of
the University of California (University) for the operation of UC LLNL.
The rights of the Federal Government are reserved under Contract 48
subject to the restrictions agreed upon by the DOE and University as
allowed under DOE Acquisition Letter 97-1.

DISCLAIMER

This work was prepared as an account of work sponsored by an agency of
the United States Government. Neither the United States Government nor
the University of California nor any of their employees, makes any
warranty, express or implied, or assumes any liability or responsibility
for the accuracy, completeness, or usefulness of any  information,
apparatus, product, or process disclosed, or represents that its use
would not infringe privately-owned rights. Reference herein to any
specific commercial products, process, or service by trade name,
trademark, manufacturer, or otherwise, does not necessarily consititute
or imply its endorsement, recommendation, or favoring by the United
States Government or the University of California. The  views and
opinions of authors expressed herein do not necessarily state or reflect
those of the United States Government or the University of California,
and shall not be used for advertising or product endorsement purposes.

NOTIFICATION OF COMMERCIAL USE

Commercialization of this product is prohibited without notifying the
Department of Energy (DOE) or Lawrence Livermore National Laboratory
(LLNL).

-------------------------------------------------------------------------

RE-DISTRIBUTION OF THIS SOFTWARE

This software may be run for commercial or non-commercial purposes. It
may be distributed on Web or ftp sites, or via CDROM software 
collections whose price covers collection and distribution costs, as
long as this README file is also distributed. This software may not be
sold by itself or as part of another software product without prior
approval by DOE or LLNL.

--------------------------------------------------------------------------

II. Notes about the Program

The original version of the Livermore Loops (officially known as the 
Livermore Fortran Kernels) was written in Fortran by Frank McMahon of
Lawrence Livermore National Laboratory. The Loops are used to benchmark
the floating point performance of a computer. The Loops benchmark was
created by extracting the DO loops that consumed most of the run time
from several physics simulation programs at LLNL. These loops are all
one-dimensional and the data they use is small enough to fit in the
cache memory of most current (1998) computers. The results of the Loops
have been a good predictor of performance on complex physics simulation
programs, provided that they use cache efficiently. Many 2D and 3D
simulations programs at LLNL have data sets much larger than cache
memory, but have been written so that they achieve high cache
utilization. The Loops is a good predictor of the performance of these
programs. The Loops use a single processor, so other benchmarks are
required to measure the performance of parallel computers. 

This version of the Loops is written entirely in ANSI C. It was 
translated directly from the Fortran version by Steven Langer of
Lawrence Livermore National Laboratory. There was no attempt to 
translate the Fortran into idiomatic C - e.g., arrays are still 
addressed via indexing macros that act like Fortran indices. The arrays
are passed to the computational kernels via global variables. This
matches the use of COMMON blocks in Fortran, instead of passing the
arrays as pointer arguments as is usually done in C. The performance
with many C compilers available in 1998 is better when arrays are passed
in global variables than when they are passed as arguments. 

The C kernels are the same as those in McMahon's original version, so
the results should be the same as for the version with a Fortran driver
program. 

This program is discussed in an article by Steven Langer in the
July/August 1998 issue of Computers in Physics.

III. Unix Computers

The program may need slight customization for each computer, but it
should not require any changes to the floating point kernels contained
in "ccernel.c". The steps required to run the benchmarks are listed
below. 

1) The Unix version of this program is distributed as source files that
must be compiled before the program can be run. The first step is to run
the configure script to prepare the Makfile and input deck for  your
computer. To make the double precision version for a Sun workstation
running Solaris, type:

./configure -cpu=solaris dmflops

To make the single precision version for Linux, type:

./configure -cpu=linux mflops

To list all the options to configure, type:

./configure help

The configure script will build a Makefile and create a text file called
"input". You should edit "input" before running. "input" contains four
lines. The first line is a description of the computer on which you will
be running the Loops. The second line is the operating system version.
The third line is the C compiler version and compiler optimization
flags. The fourth line has the name of the output file. The program does
not check for legal file names. ONLY THE FIRST 40 CHARACTERS OF EACH
LINE ARE USED. 

2) To compile, link, and run the program, type:

make clean make

The results will be placed in the file specified in the "input" file.

If you build, for example, the "double" version for a DEC workstation 
and would then like to run it on a different DEC workstation, change the

computer description and output file name in "input" and type
"clldouble".

3) You can easily investigate the effect of different compiler flags. 
Simply change the options in the definition of COPTIMIZE in Makefile 
and then type the two make lines again. 

There are some computers where the program goes into an infinite loop if
the driver routines are heavily optimized. For this reason, only the
kernels are heavily optimized. You should only alter CFLAGS to keep the
compilation compatible with the way the flags are set in COPTIMIZE 
(e.g. on an SGI you must have -n32 in both places).

4) In some cases the timer routine at the end of cflopio.c may not work
or it may give erratic timings. In that case, you can try one of the
other TIMER values in the Makefile or modify cflopio.c. The timer should
deliver repeatable timings (variable operating system overhead in each
call to the timer is a problem). The highest accuracy timer that does
not give erratic timings is preferable. The timer function used in the 
C-based Windows executable programs does not work properly on 
multi-processor PCs. Re-build the benchmarks from the Visual C++ 
projects if you have a multi-processor Windows NT computer. If you find
a timer routine that is significantly better than the one in the
distribution, please let me know (my E-mail name is shl and I am at
icf.llnl.gov).

5) The benchmark runs for vectors of several different lengths. A full
set of output is generated for each vector length. The final column,
labeled "OK", gives the number of digits in a checksum that match the
results on a computer with 64 bit IEEE format floating point numbers and
no extended precision arithmetic. On a computer that computes results
the same way, the results will match to 15 digits on most kernels. On a
computer using a Pentium chip, calculations are carried out using 80 bit
floating point numbers. On a computer using an IBM Power PC chip,
multiply-add instructions are carried out at greater than 64 bit
precision. On a Cray Y-MP, a VAX, or an IBM mainframe, the floating
point format doesn't match the IEEE standard. In all these cases, the
answers will not match to as many digits. The result for kernel 12 shows
the greatest difference - on some machines as few as 7 digits match.
This disagreement doesnot mean that one of the machines got the wrong
answer - just that this kernel amplifies small  differences. If the
compiler is generating correct code for the double precision version,
the answers should match to 12 digits or more for most of the kernels.
The answers for floats may match to as little as one digit, but should
match to 5 or more digits for most kernels.

IV. Windows Computers

The Windows version of the benchmark is distributed both as an
executable program and as source code. Both versions are distributed as
self-extracting archive files. Double-clicking on the file will expand
it into a folder. The file called "input" should be modified with a text
editor to use the model name of your PC and to save the output under a
related file name.

The source code is a Microsoft Visual C++ project. 

V. Macintosh

The Macintosh version of the benchmark is distributed both as an
executable program and as source code. Both versions are distributed as
self-extracting archive files. Double-clicking on the file will expand
it into a folder. The file called "input" should be modified with a text
editor to use the model name of your PC and to save the output under a
related file name.

The source code is a Metrowerks Code Warrior project. 

